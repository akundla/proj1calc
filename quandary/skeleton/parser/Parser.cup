package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }

:};

terminal COMMA;
terminal PLUS, MINUS, MULT, UMINUS;
terminal LPAREN, RPAREN;
terminal LBRACE, RBRACE;
terminal RET, SEMI;
terminal INT, QTYPE, REFTYPE;
terminal IF, ELSE, WHILE;
terminal LESS_THAN, LESS_THAN_OR_EQUAL_TO, GREATER_THAN, GREATER_THAN_OR_EQUAL_TO, EQUALITY_CHECK, NON_EQUALITY_CHECK;
terminal BOOL_AND, BOOL_OR;
terminal ASSIGNMENT;
terminal BOOL_NOT;
terminal PRINT;
terminal MUTABLE;

terminal Long     INTCONST;
terminal String   IDENT;

non terminal Program                  program;
non terminal Expr                     expr;
non terminal BinaryExpr               binaryExpr;
non terminal Cond                     cond;
non terminal Statement                statement;
non terminal List<Statement>          statementList;
non terminal FunctionDefinition       funcDef;
non terminal List<FunctionDefinition> funcDefList;
non terminal List<VarDecl>            formalDeclList;
non terminal List<VarDecl>            neFormalDeclList;
non terminal List<Expr>               exprList;
non terminal List<Expr>               neExprList;
non terminal VarDecl                  varDecl;
non terminal VAR_TYPE                 varType;
non terminal FunctionCallExpr         funcCallExpr;


precedence left PRINT;
// Simple way to give if-else statements higher precedence than just if statements
precedence left IF;
precedence left ELSE;

precedence left BOOL_AND, BOOL_OR;
precedence left BOOL_NOT;
precedence left LESS_THAN_OR_EQUAL_TO, GREATER_THAN_OR_EQUAL_TO, EQUALITY_CHECK, NON_EQUALITY_CHECK, LESS_THAN, GREATER_THAN;
precedence left PLUS, MINUS;
// MULT goes one line below because it is higher precedence than either PLUS or MINUS
precedence left MULT;
// UMINUS is highest precedence
precedence left UMINUS;

start with program;

program ::= funcDefList:fdl
            {: RESULT = new Program(fdl, loc(fdlleft, fdlright)); :}
         ;

funcDefList ::= funcDef:fd funcDefList:fdl 
               {: fdl.add(0, fd); RESULT = fdl; :}
            | /* empty */
               {: RESULT = new ArrayList<FunctionDefinition>(); :}    
            ;

funcDef ::= varDecl:v LPAREN formalDeclList:formaldl RPAREN LBRACE statementList:sl RBRACE
            {: RESULT = new FunctionDefinition(v, formaldl, sl, loc(slleft, slright)); :}
         ;

formalDeclList ::= neFormalDeclList:neFormaldl
                     {: RESULT = neFormaldl; :}
                  | /* empty */
                     {: RESULT = new ArrayList<VarDecl>(); :}
                  ;

neFormalDeclList ::= varDecl:v COMMA neFormalDeclList:neFormaldl
                     {: neFormaldl.add(0, v); RESULT = neFormaldl; :}
                  | varDecl:v
                     {: List<VarDecl> newFormalDecls = new ArrayList<VarDecl>(); newFormalDecls.add(0, v); RESULT = newFormalDecls; :}
                  ;

statementList ::= statement:s statementList:sl
                  /* For unknown reasons even with the above grammar the statements get parsed last-to-first, hence they are added to the list at index 0. */
                  {: sl.add(0, s); RESULT = sl; :}
               | /* empty */
                  {: RESULT = new ArrayList<Statement>(); :}
               ;

statement ::= IF cond:c statement:s1 ELSE statement:elseS
               {: RESULT = new IfElseStatement(c, s1, elseS, loc(cleft, cright)); :}
               %prec ELSE
            | IF cond:c statement:s
               {: RESULT = new IfStatement(c, s, loc(cleft, cright)); :}
               %prec IF
            | WHILE LPAREN cond:c RPAREN statement:s
               {: RESULT = new WhileLoopStatement(c, s, loc(cleft, cright)); :}
            | RET expr:e SEMI
               {: RESULT = new ReturnStatement(e, loc(eleft, eright)); :}
            | PRINT expr:e SEMI
               {: RESULT = new PrintStatement(e, loc(eleft, eright)); :}
            | varDecl:v ASSIGNMENT expr:e SEMI
               {: RESULT = new VarDeclareStatement(v, e, loc(vleft, vright)); :}
            | IDENT:i ASSIGNMENT expr:e SEMI
               {: RESULT = new AssignmentStatement(i, e, loc(ileft, iright)); :}
            | LBRACE statementList:sl RBRACE
               {: RESULT = new StatementList(sl, loc(slleft, slright)); :}
            | funcCallExpr:fce SEMI
               {: RESULT = new MutFuncCallStatement(fce, loc(fceleft, fceright)); :}
            ;

varDecl ::= varType:t IDENT:i
            {: RESULT = new VarDecl(false, t, i); :}
         | MUTABLE varType:t IDENT:i
            {: RESULT = new VarDecl(true, t, i); :}
         ;

varType ::= INT
         {: RESULT = VAR_TYPE.INT; :}
      | QTYPE
         {: RESULT = VAR_TYPE.Q; :}
      | REFTYPE
         {: RESULT = VAR_TYPE.REF; :}
      ;

cond ::= LPAREN cond:c RPAREN
         {: RESULT = c; :}
      |  BOOL_NOT cond:c
         {: RESULT = new UnaryCond(UnaryCond.BOOL_NOT, c, loc(cleft, cright)); :}
      |  cond:c1 BOOL_AND cond:c2
         {: RESULT = new BinaryCond(c1, BinaryCond.BOOL_AND, c2, loc(c1left, c1right)); :}
      |  cond:c1 BOOL_OR cond:c2
         {: RESULT = new BinaryCond(c1, BinaryCond.BOOL_OR, c2, loc(c1left, c1right)); :}
      |  expr:c1 LESS_THAN expr:c2
         {: RESULT = new BinaryExprCond(c1, BinaryExprCond.LESS_THAN, c2, loc(c1left, c1right)); :}
      |  expr:c1 LESS_THAN_OR_EQUAL_TO expr:c2
         {: RESULT = new BinaryExprCond(c1, BinaryExprCond.LESS_THAN_OR_EQUAL_TO, c2, loc(c1left, c1right)); :}
      |  expr:c1 GREATER_THAN expr:c2
         {: RESULT = new BinaryExprCond(c1, BinaryExprCond.GREATER_THAN, c2, loc(c1left, c1right)); :}
      |  expr:c1 GREATER_THAN_OR_EQUAL_TO expr:c2
         {: RESULT = new BinaryExprCond(c1, BinaryExprCond.GREATER_THAN_OR_EQUAL_TO, c2, loc(c1left, c1right)); :}
      |  expr:c1 EQUALITY_CHECK expr:c2
         {: RESULT = new BinaryExprCond(c1, BinaryExprCond.EQUALITY_CHECK, c2, loc(c1left, c1right)); :}
      |  expr:c1 NON_EQUALITY_CHECK expr:c2
         {: RESULT = new BinaryExprCond(c1, BinaryExprCond.NON_EQUALITY_CHECK, c2, loc(c1left, c1right)); :}
      ;

expr ::= INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}
      |  binaryExpr:e
         {: RESULT = e; :}
      |  MINUS expr:e
         {: RESULT = new UnaryExpr(UnaryExpr.UNARY_NEGATION, e, loc(eleft, eright)); :}
         %prec UMINUS
      |  funcCallExpr:fce
         {: RESULT = fce; :}
      |  LPAREN expr:e RPAREN
         {: RESULT = e; :}
      |  IDENT:i
         {: RESULT = new IdentifierExpr(i, loc(ileft, iright)); :}
      ;

funcCallExpr ::= IDENT:i LPAREN exprList:el RPAREN
               {: RESULT = new FunctionCallExpr(i, el, loc(ileft, iright)); :}
            ;

exprList ::= neExprList:neEL
                  {: RESULT = neEL; :}
               | /* empty */
                  {: RESULT = new ArrayList<Expr>(); :}
               ;

neExprList ::= expr:e COMMA neExprList:neEL
                  {: neEL.add(0, e); RESULT = neEL; :}
               | expr:e
                  {: List<Expr> newExprList = new ArrayList<Expr>(); newExprList.add(0, e); RESULT = newExprList; :}
               ;

binaryExpr ::= expr:e1 PLUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 MINUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 MULT expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.MULT, e2, loc(e1left, e1right)); :}
            ;
